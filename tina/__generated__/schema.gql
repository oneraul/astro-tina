# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  posts(relativePath: String): Posts!
  postsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostsFilter): PostsConnection!
  siteConfig(relativePath: String): SiteConfig!
  siteConfigConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SiteConfigFilter): SiteConfigConnection!
}

input DocumentFilter {
  posts: PostsFilter
  siteConfig: SiteConfigFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Posts | SiteConfig | Folder

type Posts implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostsFilter {
  title: StringFilter
  body: RichTextFilter
}

type PostsConnectionEdges {
  cursor: String!
  node: Posts
}

type PostsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostsConnectionEdges]
}

union SiteConfigFave_post = Posts

type SiteConfig implements Node & Document {
  thing: String!
  date: String
  fave_post: SiteConfigFave_post
  yes: Boolean
  number: Float
  imgSrc: String
  color: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input SiteConfigFave_postFilter {
  posts: PostsFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input SiteConfigFilter {
  thing: StringFilter
  date: DatetimeFilter
  fave_post: SiteConfigFave_postFilter
  yes: BooleanFilter
  number: NumberFilter
  imgSrc: ImageFilter
  color: StringFilter
}

type SiteConfigConnectionEdges {
  cursor: String!
  node: SiteConfig
}

type SiteConfigConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SiteConfigConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePosts(relativePath: String!, params: PostsMutation!): Posts!
  createPosts(relativePath: String!, params: PostsMutation!): Posts!
  updateSiteConfig(relativePath: String!, params: SiteConfigMutation!): SiteConfig!
  createSiteConfig(relativePath: String!, params: SiteConfigMutation!): SiteConfig!
}

input DocumentUpdateMutation {
  posts: PostsMutation
  siteConfig: SiteConfigMutation
  relativePath: String
}

input DocumentMutation {
  posts: PostsMutation
  siteConfig: SiteConfigMutation
}

input PostsMutation {
  title: String
  body: JSON
}

input SiteConfigMutation {
  thing: String
  date: String
  fave_post: String
  yes: Boolean
  number: Float
  imgSrc: String
  color: String
}

schema {
  query: Query
  mutation: Mutation
}
