name: "Astro Tina Deploy"
description: "A composite action that prepares your Astro site to be deployed to GitHub Pages"
branding:
  icon: "box"
  color: "orange"
inputs:
  path:
    description: "Path of the directory containing your site"
    required: false
    default: "."
  node-version:
    description: "The node version to use"
    required: false
    default: "18"
  package-manager:
    description: "If not automatically detectable, you may specify your preferred package manager"
    required: false
    default: ""
  pnpm-version:
    description: "If package-manager is pnpm, use this specific version. Defaults to latest"
    required: false
    default: "7.x.x"
  resolve-dep-from-path:
    description: "If the dependency file is located inside the folder specified by path"
    type: boolean
    required: false
    default: true

runs:
  using: composite
  steps:
    - name: Check lockfiles
      shell: "bash"
      env:
        INPUT_PM: ${{ inputs.package-manager }}
      run: |
        len=`echo $INPUT_PM | wc -c`
        if [ $len -gt 1 ]; then
            echo "PACKAGE_MANAGER=$INPUT_PM" >> $GITHUB_ENV
        elif [ $(find "." -name "pnpm-lock.yaml") ]; then
            echo "PACKAGE_MANAGER=pnpm" >> $GITHUB_ENV
            echo "LOCKFILE=pnpm-lock.yaml" >> $GITHUB_ENV
        elif [ $(find "." -name "yarn.lock") ]; then 
            echo "PACKAGE_MANAGER=yarn" >> $GITHUB_ENV
            echo "LOCKFILE=yarn.lock" >> $GITHUB_ENV
        elif [ $(find "." -name "package-lock.json") ]; then 
            echo "PACKAGE_MANAGER=npm" >> $GITHUB_ENV
            echo "LOCKFILE=package-lock.json" >> $GITHUB_ENV
        elif [ $(find "." -name "bun.lockb") ]; then 
            echo "PACKAGE_MANAGER=bun" >> $GITHUB_ENV
            echo "LOCKFILE=bun.lockb" >> $GITHUB_ENV
        else
            echo "No lockfile found.
        Please specify your preferred \"package-manager\" in the action configuration."
            exit 1
        fi
    - name: Setup PNPM
      if: ${{ env.PACKAGE_MANAGER == 'pnpm' }}
      uses: pnpm/action-setup@v2.2.4
      with:
        version: ${{ inputs.pnpm-version }}

    - name: Setup Bun
      if: ${{ env.PACKAGE_MANAGER == 'bun' }}
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Setup Node
      uses: actions/setup-node@v3
      if: inputs.resolve-dep-from-path == true
      with:
        node-version: ${{ inputs.node-version }}
        cache: ${{ env.PACKAGE_MANAGER }}
        cache-dependency-path: "${{ inputs.path }}/${{ env.LOCKFILE }}"

    - name: Setup Node
      uses: actions/setup-node@v3
      if: inputs.resolve-dep-from-path == false
      with:
        node-version: ${{ inputs.node-version }}
        cache: ${{ env.PACKAGE_MANAGER }}

    - name: Get node_modules cache
        uses: actions/cache@v3.0.2
        id: node_modules
        with:
          path: |
            ${{ inputs.path }}/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('${{ inputs.path }}/${{ env.LOCKFILE }}') }}-${{ steps.node.outputs.version }}

    - name: Install
      shell: "bash"
      run: |
        cd ${{ inputs.path }}
        $PACKAGE_MANAGER install

    - name: Build TinaCMS
      shell: bash
      env:
        # TINA_PUBLIC_CLIENT_ID: ${{ secrets.TINA_PUBLIC_CLIENT_ID }}
        # TINA_TOKEN: ${{ secrets.TINA_TOKEN }}
        TINA_CLIENT_ID: ff6389e9-e1ba-424b-82c3-1a27c40493d3
        TINA_TOKEN: 15be0c4a8b83d036883cafe8f570027ebc36701c
      run: npx tinacms build

    - name: Build
      shell: "bash"
      run: |
        cd ${{ inputs.path }}
        $PACKAGE_MANAGER run build

    - name: Upload Pages Artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: "${{ inputs.path }}/dist/"
